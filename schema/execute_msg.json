{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "put_deposit"
      ],
      "properties": {
        "put_deposit": {
          "type": "object",
          "required": [
            "amount",
            "deadline",
            "depositor",
            "lower_sqrt_price_x96",
            "lower_tick",
            "upper_tick"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint256"
            },
            "deadline": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "depositor": {
              "type": "string"
            },
            "lower_sqrt_price_x96": {
              "$ref": "#/definitions/Uint256"
            },
            "lower_tick": {
              "type": "integer",
              "format": "int32"
            },
            "upper_tick": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_deposit"
      ],
      "properties": {
        "get_deposit": {
          "type": "object",
          "required": [
            "deadline",
            "sqrt_price_x96",
            "token_id"
          ],
          "properties": {
            "deadline": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "sqrt_price_x96": {
              "$ref": "#/definitions/Uint256"
            },
            "token_id": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "put_withdraw"
      ],
      "properties": {
        "put_withdraw": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "put_cancel"
      ],
      "properties": {
        "put_cancel": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_withdraw"
      ],
      "properties": {
        "get_withdraw": {
          "type": "object",
          "required": [
            "token_ids"
          ],
          "properties": {
            "token_ids": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint128",
                "minimum": 0.0
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "transfer_ownership"
      ],
      "properties": {
        "transfer_ownership": {
          "type": "object",
          "required": [
            "new_owner"
          ],
          "properties": {
            "new_owner": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_price_contract"
      ],
      "properties": {
        "update_price_contract": {
          "type": "object",
          "required": [
            "new_price_contract"
          ],
          "properties": {
            "new_price_contract": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    }
  }
}
